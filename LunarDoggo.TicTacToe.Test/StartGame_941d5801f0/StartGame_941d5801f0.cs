// ********RoostGPT********
// Test generated by RoostGPT for test Csharp-beginner using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
using System;
using System.Linq;
using NUnit.Framework;
using TicTacToe;

namespace TicTacToe.Test
{
    [TestFixture]
    public class StartGame_941d5801f0
    {
        private GameState _gameState;
        private ButtonTileMapping[] _buttonTileMappings;
        private int _tilesResetEventRaisedCount;

        [SetUp]
        public void SetUp()
        {
            // TODO: User should instantiate ButtonTileMappings with actual Button references if needed
            _buttonTileMappings = new[] { new ButtonTileMapping() }; // Mocked ButtonTileMapping array
            _gameState = new GameState(_buttonTileMappings);

            _tilesResetEventRaisedCount = 0;
            _gameState.TilesReset += (sender, e) => _tilesResetEventRaisedCount++;
        }

        [Test]
        public void StartGame_TilesResetEventRaised()
        {
            _gameState.StartGame();

            Assert.AreEqual(1, _tilesResetEventRaisedCount, "TilesReset event should be raised exactly once after starting the game.");
        }

        [Test]
        public void StartGame_CurrentPlayerIsFirstPlayer()
        {
            _gameState.StartGame();

            // Using reflection to access private field 'currentPlayer'
            var currentPlayerField = typeof(GameState).GetField("currentPlayer", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            var currentPlayerValue = currentPlayerField.GetValue(_gameState) as Player;

            // Using reflection to access private field 'firstPlayer'
            var firstPlayerField = typeof(GameState).GetField("firstPlayer", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            var firstPlayerValue = firstPlayerField.GetValue(_gameState) as Player;

            Assert.AreEqual(firstPlayerValue, currentPlayerValue, "After starting the game, the current player should be the first player.");
        }

        [TearDown]
        public void TearDown()
        {
            // Clean up any mock objects or resources created for the tests.
        }
    }
}

