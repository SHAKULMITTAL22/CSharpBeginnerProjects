// ********RoostGPT********
// Test generated by RoostGPT for test Csharp-beginner using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
using System;
using NUnit.Framework;
using TicTacToe;
using System.Collections.Generic;

namespace TicTacToe.Test
{
    [TestFixture]
    public class OccupyTile_992d29020a
    {
        private GameBoard _gameBoard;
        private Player _player1;
        private Player _player2;
        
        [SetUp]
        public void Setup()
        {
            _gameBoard = new GameBoard();
            _player1 = new Player { Id = 1, Name = "Player 1" }; // TODO: Change player details if needed
            _player2 = new Player { Id = 2, Name = "Player 2" }; // TODO: Change player details if needed
        }
        
        [Test]
        public void OccupyTile_ValidCoordinates_ReturnsTrue()
        {
            var result = _gameBoard.OccupyTile(_player1, 0, 0);
            Assert.IsTrue(result, "OccupyTile should return true for empty tile");
        }
        
        [Test]
        public void OccupyTile_OccupiedCoordinates_ReturnsFalse()
        {
            _gameBoard.OccupyTile(_player1, 0, 0);
            var result = _gameBoard.OccupyTile(_player2, 0, 0);
            Assert.IsFalse(result, "OccupyTile should return false for already occupied tile");
        }

        [Test]
        public void OccupyTile_InvalidXCoordinate_ThrowsArgumentOutOfRangeException()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => _gameBoard.OccupyTile(_player1, 3, 0), 
                "OccupyTile should throw ArgumentOutOfRangeException for X coordinate outside of the game board");
        }

        [Test]
        public void OccupyTile_InvalidYCoordinate_ThrowsArgumentOutOfRangeException()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => _gameBoard.OccupyTile(_player1, 0, 3), 
                "OccupyTile should throw ArgumentOutOfRangeException for Y coordinate outside of the game board");
        }

        [Test]
        public void OccupyTile_NegativeXCoordinate_ThrowsArgumentOutOfRangeException()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => _gameBoard.OccupyTile(_player1, -1, 0),
                "OccupyTile should throw ArgumentOutOfRangeException for negative X coordinate");
        }

        [Test]
        public void OccupyTile_NegativeYCoordinate_ThrowsArgumentOutOfRangeException()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => _gameBoard.OccupyTile(_player1, 0, -1),
                "OccupyTile should throw ArgumentOutOfRangeException for negative Y coordinate");
        }

        [Test]
        public void OccupyTile_ChecksPlayerOccupiedTile_EventIsRaised()
        {
            bool eventRaised = false;
            _gameBoard.PlayerOccupiedTile += (sender, args) =>
            {
                eventRaised = args.Player == _player1 && args.X == 1 && args.Y == 1;
            };
            
            _gameBoard.OccupyTile(_player1, 1, 1);
            Assert.IsTrue(eventRaised, "PlayerOccupiedTile event should be raised when a player occupies a tile");
        }
        
        [TearDown]
        public void Teardown()
        {
            _gameBoard.Reset(); // Clean up the game board for the next test.
        }
    }
}

